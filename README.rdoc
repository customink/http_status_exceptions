= HTTP status exception

This simple plugin will register exception classes for all HTTP status. These exceptions can then be raised from your controllers, after
which a response will be send back to the client with the desired HTTP status, possible with some other content.

You can use this plugin to access control mechanisms. You can simply raise a <tt>HTTPStatus::Forbidden</tt> if a user is not allowed to
perform a certain action. A nice looking error page will be the result. See the project wiki 
(https://github.com/wvanbergen/http_status_exceptions/wiki) for additional documentation.

This plugin only works with Rails 3. Version 0.2.1 of this plugin is compatible with Rails 2. The code for this version can be found in
the rails2 branch: https://github.com/wvanbergen/http_status_exceptions/tree/rails2.

== Installation

Installation is simple. Simply add the gem to the configuration in your <tt>Gemfile</tt>:

  # Gemfile
  gem 'http_status_exceptions'

Run <tt>bundle install</tt> to make sure to have the gem included in your bundle.

== Configuration

You can modify where HTTP status exception looks for its template files like so:

  class ApplicationController < ActionController::Base
    ...
    HTTPStatus::Base.template_path = 'path_to/http_status_templates'
  end

You can also modify which layout is used when rendering a template by setting the <tt>template_layout</tt>:

  class ApplicationController < ActionController::Base
    ...
    HTTPStatus::Base.template_layout = 'exception'
  end

If you don't set a template_layout the current layout for the requested action will be used.

== Usage

  class BlogController < ApplicationController

    def destroy
      raise HTTPStatus::Forbidden, 'You cannot delete blogs!' unless current_user.can_delete_blogs?
      @blog.destroy
    end
  end

By default, this will return an empty response with the "forbidden" status code (403). If you want to add content
to the response as well, create the following view: <tt>shared/http_status/forbidden.html.erb</tt>. You can use the
<tt>@exception</tt>-object in your view:

  <h1>Forbidden</h1>
  <p> <%= h(@exception.message) %> </p>
  <hr />
  <p>HTTP status code <small> <%= @exception.status_code %>: <%= @exception.status.to_s.humanize %></small></p>

The response will only be sent if the request format is HTML because of the name of the view file. In theory you
could make a response for XML requests as well by using <tt>shared/http_status/forbidden.xml.builder</tt> as filename
